
																CRIAÇÃO DE UMA WEB API COMPLETA
													(Na qual a camada de banco e negócios já estão criadas)

	1) Criando a solução "APICompleta":

		1.1) Crie uma solução em branco chamada "APICompleta".

		1.2) Acesse as pastas desta solução a partir do "Windows Explorer" e dentro dela, crie uma pasta chamada "src", exemplo "APICompleta\src".

		1.3) Na raiz deste repositório você encontrará uma pasta: "Referências\APICompleta\", copie o conteúdo desta pasta (pasta: "DevIO.Business" e pasta: "DevIO.Data") para 
			dentro de "APICompleta\src", que você criou no passo anterior.

		1.4) Retorne ao VS e clique com o botão direito do mouse, sobre a solução e escolha: "Adicionar\Projeto existente...", navegue até 
			"APICompleta\src\DevIO.Business\DevIO.Business.csproj" e dê dois cliques sobre este projeto para adicionar o mesmo a solução.

		1.5) Repita o processo anterior até "APICompleta\src\DevIO.Data\DevIO.Data.csproj" e dê dois cliques sobre este projeto para adicionar o mesmo a solução.
	
		1.6) Clique com o botão direito do mouse sobre a solução e escolha: "Adicionar\Novo Projeto...".

		1.7) Escolha o tipo de projeto com "API Web do ASP.NET Core", clique em próximo.

		1.8) Chame este projeto de "DevIO.Api", e "APICompleta\src\" para ser salvo e clique em próximo.

		1.9) Sete as "Informações adicionais":

				Estrutura de Destino: "Atual"
				Tipo de Autenticação: "Nenhum"
				Configurar para HTTPS: "Sim"
				Habilitar o Docker: "Não"
				Habilitar o suporte a OpenAPI: Não

			Feito isto clique em criar.

	2) Configurando os projetos e a solução:

		2.1) Clique com o botão direito do mouse sobre "DevIO.Api" e escolha a opção: "Definir como projeto de inicialização".

		2.2) Em projeto "DevIO.Api", clique com o botão direito do mouse sobre "Dependências" e escolha a opção "Adicionar referência de projeto...".

			2.2.1) Na tela do "Gerenciador de Referências", flag o projeto "DevIO.Business" e o "DevIO.Data", em seguida clique em OK.

		2.3) Compile a aplicação para ver se não existem erros.

	3) Implementando DTOs (ViewModels):

		3.1) Crie uma pasta chamada "ViewModels" em "DevIO.Api" e dentro dela crie as models abaixo:

			3.1.1) FornecedorViewModel.cs

				using System;
				using System.Collections.Generic;
				using System.ComponentModel.DataAnnotations;

				namespace DevIO.Api.ViewModel
				{
					public class FornecedorViewModel
					{
						[Key] // Informa ao Scaffold que a propriedade Id é uma chave, para que o mesmo não tente gerar a mesma.
						public Guid Id { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(100, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Nome { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(14, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 11)]
						public string Documento { get; set; }

						public int TipoFornecedor { get; set; }

						public EnderecoViewModel Endereco { get; set; }

						public bool Ativo { get; set; }

						public IEnumerable<ProdutoViewModel> Produtos { get; set; }
					}
				}

			3.1.2) EnderecoViewModel.cs

				using System;
				using System.ComponentModel.DataAnnotations;

				namespace DevIO.Api.ViewModel
				{
					public class EnderecoViewModel
					{
						[Key]
						public Guid Id { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(200, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Logradouro { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(50, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 1)]
						public string Numero { get; set; }

						public string Complemento { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(100, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Bairro { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(8, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Cep { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(100, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Cidade { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(50, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public String Estado { get; set; }

						public Guid FornecedorId { get; set; }
					}
				}
			
			3.1.3) ProdutoViewModel.cs

				using System;
				using System.ComponentModel.DataAnnotations;
				
				namespace DevIO.Api.ViewModel
				{
					public class ProdutoViewModel
					{
						[Key]
						public Guid Id { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						public Guid FornecedorId { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(200, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Nome { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						[StringLength(1000, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 2)]
						public string Descricao { get; set; }

						public string ImagemUpload { get; set; }

						public string Imagem { get; set; }

						[Required(ErrorMessage = "O campo {0} é obrigatório")]
						public string Valor { get; set; }

						[ScaffoldColumn(false)]
						public DateTime DataCadastro { get; set; }

						public bool Ativo { get; set; }

						[ScaffoldColumn(false)]
						public string NomeFornecdor { get; set; }
					}
				}
